// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique @db.VarChar(100)
  email         String       @unique @db.VarChar(255)
  passwordHash  String       @map("password_hash") @db.VarChar(255)
  isActive      Boolean      @default(true) @map("is_active")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  roles         UserRole[]
  sharedPages   UserShared[]
  pages         Page[]
  comments      Comment[]
  media         Media[]

  @@map("users")
}

model Role {
  id            String          @id @default(uuid())
  name          String          @unique @db.VarChar(50)
  description   String?
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  users         UserRole[]
  permissions   RolePermission[]
  sharedPages   UserShared[]

  @@map("roles")
}

model Permission {
  id            String           @id @default(uuid())
  name          String           @unique @db.VarChar(50)
  description   String?
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  roles         RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId        String
  permissionId  String

  role          Role       @relation(fields: [roleId], references: [id])
  permission    Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  userId        String
  roleId        String

  user          User @relation(fields: [userId], references: [id])
  role          Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model Page {
  id            String       @id @default(uuid())
  userId        String       @map("user_id")
  title         String?      @db.VarChar(255)
  description   String?
  isDeleted     Boolean      @default(false) @map("is_deleted")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  owner         User         @relation(fields: [userId], references: [id])
  blocks        Block[]
  sharedUsers   UserShared[]

  @@map("pages")
}

model UserShared {
  id            String   @id @default(uuid())
  pageId        String   @map("page_id")
  userId        String   @map("user_id")
  roleId        String   @map("role_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  page          Page     @relation(fields: [pageId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  role          Role     @relation(fields: [roleId], references: [id])

  @@map("user_shared")
}

model Block {
  id            String     @id @default(uuid())
  pageId        String     @map("page_id")
  parentId      String?    @map("parent_id")
  type          String     @db.VarChar(50)
  content       String?
  orderIndex    Int        @map("order_index")
  isDeleted     Boolean    @default(false) @map("is_deleted")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  page          Page       @relation(fields: [pageId], references: [id])
  parent        Block?     @relation("BlockToBlock", fields: [parentId], references: [id])
  children      Block[]    @relation("BlockToBlock")
  comments      Comment[]

  @@map("blocks")
}

model Comment {
  id          String    @id @default(uuid())
  blockId     String    @map("block_id")
  userId      String    @map("user_id")
  parentId    String?   @map("parent_id")
  content     String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  block       Block     @relation(fields: [blockId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  parent      Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentToComment")

  @@map("comments")
}

model Media {
  id          String    @id @default(uuid())
  url         String    @db.VarChar(255)
  type        String    @db.VarChar(50)
  uploadedBy  String    @map("uploaded_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user        User      @relation(fields: [uploadedBy], references: [id])

  @@map("media")
}

